/*Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [1,1]
Output: 1
Example 4:

Input: nums = [1,1,2]
Output: 1
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
*/
 int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        if (n <= 1)
        return -1;
 
        // initialize fast and slow
        int slow = nums[0];
        int fast = nums[nums[0]];

        // loop to enter in the cycle
        while (fast != slow) {

            // move one step for slow
            slow = nums[slow];

            // move two step for fast
            fast = nums[nums[fast]];
        }

        // loop to find entry point of the cycle
        fast = 0;
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
        }
